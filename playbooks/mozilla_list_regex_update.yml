---
- hosts: localhost
  become: yes
  gather_facts: no
  vars:
    - ansible_python_interpreter: "/usr/bin/python3"

  tasks:
# Create a working directory to hold the list.
    - name:         Create a directory if it does not exist
      file:
        path:       ./temp
        state:      directory
        mode:       '0755'

  # Create a working directory to hold the list.
    - name:         Create a directory if it does not exist
      file:
        path:       ./source_files
        state:      directory
        mode:       '0755'

  # Download the list if it has changed and store is as is.
    - name:              Download Public Suffix list from Mozilla
      get_url:
        url:            'https://publicsuffix.org/list/effective_tld_names.dat'
        dest:           ./temp/effective_tld_names.dat
        validate_certs: no

  # Create the working file if it does not exist.
  # This file is where the extracted content we want from Mozilla will go.
    - name:         Create/Copy contents to working file
      copy:
        src:        ./temp/effective_tld_names.dat
        dest:       ./temp/effective_tld_names_formatted.dat
      changed_when: false

  # Format the ICANN TLD list
    - name:         Remove all Private Domain Information (requires Ansible >= 2.4)
      replace:
        path:       ./temp/effective_tld_names_formatted.dat
        after:      '// ===END ICANN DOMAINS==='
        regexp:     '^(.+)$'
      changed_when: false

    - name:         Find all punycode domains and remove comments
      replace:
        path:       ./temp/effective_tld_names_formatted.dat
        regexp:     '^(\/\/ )(xn--[^ ]+)(.*)'
        replace:    '\2'
      changed_when: false

    - name:         Remove all lines that contain characters not on the list
      lineinfile:
        path:       ./temp/effective_tld_names_formatted.dat
        regexp:     '[^\n\w\d._-]'
        state:      absent
      changed_when: false

    - name:         Remove all blank lines
      lineinfile:
        path:       ./temp/effective_tld_names_formatted.dat
        regexp:     '^$'
        state:      absent
      changed_when: false

  ## sort TLD by number of parts
  # 1st level TLDs
    - name:         Create/Copy contents to 1st_level_tlds.dat
      copy:
        src:        ./temp/effective_tld_names_formatted.dat
        dest:       ./temp/1st_level_effective_tlds.dat
      changed_when: false

    - name:         Remove all non 1st level tlds from 1st_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/1st_level_effective_tlds.dat
        regexp:     '[.]'
        state:      absent
      changed_when: false

    - name:         Insert Index for Input Framework in 1st_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/1st_level_effective_tlds.dat
        insertbefore: BOF
        regex:      '^(#fields	tld)$'
        line:       "#fields	tld"
        state:      present
      changed_when: false

  # 2nd level TLDs
    - name:         Create/Copy contents to 2nd_level_tlds.dat
      copy:
        src:        ./temp/effective_tld_names_formatted.dat
        dest:       ./temp/2nd_level_effective_tlds.dat
      changed_when: false

    - name:         Remove 1st level tlds from 2nd_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/2nd_level_effective_tlds.dat
        regexp:     '^[^.]+$'
        state:      absent
      changed_when: false

    - name:         Remove 3rd & 4th level tlds
      lineinfile:
        path:       ./temp/2nd_level_effective_tlds.dat from 2nd_level_effective_tlds.dat
        regexp:     '^([^.]+[.]){2,3}[^.]+$'
        state:      absent
      changed_when: false

    - name:         Insert Index for Input Framework in 2nd_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/2nd_level_effective_tlds.dat
        insertbefore: BOF
        regex:      '^(#fields	tld)$'
        line:       "#fields	tld"
        state:      present
      changed_when: false

  # 3rd level TLDs
    - name:         Create/Copy contents to 3rd_level_effective_tlds.dat
      copy:
        src:        ./temp/effective_tld_names_formatted.dat
        dest:       ./temp/3rd_level_effective_tlds.dat
      changed_when: false

    - name:         Remove 1st & 2nd level tlds from 3rd_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/3rd_level_effective_tlds.dat
        regexp:     '^([^.]+[.]){0,1}[^.]+$'
        state:      absent
      changed_when: false

    - name:         Remove 4th level tlds
      lineinfile:
        path:       ./temp/3rd_level_effective_tlds.dat from 3rd_level_effective_tlds.dat
        regexp:     '^([^.]+[.]){3}[^.]+$'
        state:      absent
      changed_when: false

    - name:         Insert Index for Input Framework in 3rd_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/3rd_level_effective_tlds.dat
        insertbefore: BOF
        regex:      '^(#fields	tld)$'
        line:       "#fields	tld"
        state:      present
      changed_when: false

  # 4th level TLDs
    - name:         Create/Copy contents to 4th_level_effective_tlds.dat
      copy:
        src:        ./temp/effective_tld_names_formatted.dat
        dest:       ./temp/4th_level_effective_tlds.dat
      changed_when: false

    - name:         Remove 1st thru 3rd level tlds from 4th_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/4th_level_effective_tlds.dat
        regexp:     '^([^.]+[.]){0,2}[^.]+$'
        state:      absent
      changed_when: false

    - name:         Insert Index for Input Framework in 4th_level_effective_tlds.dat
      lineinfile:
        path:       ./temp/4th_level_effective_tlds.dat
        insertbefore: BOF
        regex:      '^(#fields	tld)$'
        line:       "#fields	tld"
        state:      present
      changed_when: false

# Copy the contents of the working file to the finished copy that will get pushed to the Sensors.
    - name:         Compare/Copy 1st level working file to previous final ICANN TLD list
      copy:
        src:        ./temp/1st_level_effective_tlds.dat
        dest:       ../input_files/1st_level_public_icann.dat
      register:     new_1st_level

    - name:         Compare/Copy 2nd level working file to previous final ICANN TLD list
      copy:
        src:        ./temp/2nd_level_effective_tlds.dat
        dest:       ../input_files/2nd_level_public_icann.dat
      register:     new_2nd_level

    - name:         Compare/Copy 3rd level working file to previous final ICANN TLD list
      copy:
        src:        ./temp/3rd_level_effective_tlds.dat
        dest:       ../input_files/3rd_level_public_icann.dat
      register:     new_3rd_level

    - name:         Compare/Copy 4th level working file to previous final ICANN TLD list
      copy:
        src:        ./temp/4th_level_effective_tlds.dat
        dest:       ../input_files/4th_level_public_icann.dat
      register:     new_4th_level
